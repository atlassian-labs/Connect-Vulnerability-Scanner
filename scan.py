import argparse
import json
import random
import re
import shutil
import string
import time
from itertools import chain

import requests
from selenium import webdriver
from selenium.common.exceptions import NoAlertPresentException, TimeoutException
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait

from property import AppPropertyScanner, Submission
from report import Reporter


def parse_args():
    parser = argparse.ArgumentParser(
        description="scans Connect apps for XSS vulnerabilities"
    )
    parser.add_argument("--module", required=False)
    parser.add_argument(
        "--type",
        const="all",
        default="all",
        nargs="?",
        choices=["xss", "secret", "all"],
        help="scan for xss, secrets in properties, or both(default)",
    )
    parser.add_argument("--username", help="username of an atlassian account")
    parser.add_argument("--password")
    parser.add_argument(
        "--api-token",
        help="API token used for basic auth. Only needed for the secret scanner",
    )
    parser.add_argument("--descriptor", help="the url of the descriptor")
    parser.add_argument("--url", help="instance URL where the app is installed")
    return parser.parse_args()


def extract_ac_words(text):
    pattern = r"\{(ac\..*?)\}"
    words = re.findall(pattern, text)
    return words


def possibly_secret_form_name(name):
    name = name.lower()
    return "password" in name or "access_token" in name or "secret" in name


def possibly_secret_submission(form):
    form_name = form.get_attribute("name").lower() if form.get_attribute("name") else ""
    input_elements = form.find_elements(By.TAG_NAME, "input")
    names = chain(
        (input_elements.get_attribute("name") for input_elements in input_elements),
        [form_name],
    )
    return any(map(possibly_secret_form_name, names))


def inject_dummy_password(form, canary):
    input_elements = form.find_elements(By.TAG_NAME, "input")
    found = False
    for input_element in input_elements:
        if possibly_secret_form_name(input_element.get_attribute("name")):
            found = True
            input_element.send_keys(canary)
        else:
            input_element.send_keys("dummy")

    if found:
        form.submit()
    return found


def gen_canary(length=16):
    return "".join(random.choice(string.ascii_letters) for _ in range(length))


def spray_forms(module_url, driver):
    # Navigate to the module's URL
    driver.get(module_url)

    submissions = {}

    # Check if there are iframes matching the module URL
    iframes = driver.find_elements(By.TAG_NAME, "iframe")
    for iframe in iframes:
        iframe_src = iframe.get_attribute("src")
        if module_url in iframe_src:
            driver.switch_to.frame(iframe)

            # Check for forms that might be password forms
            forms = driver.find_elements(By.TAG_NAME, "form")
            for form in forms:
                canary = gen_canary()
                if inject_dummy_password(form, canary):
                    submissions[canary] = Submission(
                        iframe_src, form.get_attribute("name")
                    )
            # Return to default content
            driver.switch_to.default_content()
    return submissions


def fuzz_endpoint_with_selenium(url, driver, payloads, params, reporter: Reporter):
    for payload in payloads:
        query_string = "&".join(f"{param}={payload}" for param in params)
        if not query_string:
            return
        fuzzed_url = f"{url}?{query_string}"
        driver.get(fuzzed_url)
        try:
            WebDriverWait(driver, 3).until(EC.alert_is_present())
            alert = driver.switch_to.alert
            alert.accept()
            reporter.add_vuln(
                check_name="XSS check",
                description="Reflected XSS found.",
                recommendation="",
                proof=fuzzed_url,
                severity="High",
            )
            return
        except (NoAlertPresentException, TimeoutException):
            continue


def main():
    args = parse_args()
    username = args.username
    password = args.password
    instance_url = args.url
    api_token = args.api_token

    options = Options()
    options.binary_location = shutil.which("chromium") or shutil.which("chrome")
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    driver = webdriver.Chrome(options=options)

    with open("xss-payload-list.txt", "r") as f:
        payloads = f.readlines()

    driver.get(instance_url)
    WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.ID, "username"))
    ).send_keys(username)
    driver.find_element(By.ID, "login-submit").click()
    WebDriverWait(driver, 10).until(
        EC.visibility_of_element_located((By.ID, "password"))
    ).send_keys(password)
    driver.find_element(By.ID, "login-submit").click()

    # Wait for navigation
    time.sleep(10)

    session = requests.Session()
    descriptor = session.get(args.descriptor).json()
    modules = dict(descriptor["modules"])
    submissions = {}
    reporter = Reporter(descriptor["key"], descriptor["name"])

    for module_type in modules.values():
        if not isinstance(module_type, list):
            continue
        for module in module_type:
            if "key" not in module or "url" not in module:
                continue
            key = module["key"]
            params = extract_ac_words(module["url"])
            endpoint = f"{instance_url}/plugins/servlet/ac/{descriptor['key']}/{key}"
            if args.type in ("all", "xss"):
                fuzz_endpoint_with_selenium(
                    endpoint, driver, payloads, params, reporter
                )
            if args.type in ("all", "secret") and api_token:
                submissions |= spray_forms(endpoint, driver)
    if api_token and args.type != "xss":
        scanner = AppPropertyScanner(
            session, reporter, instance_url, descriptor["key"], username, api_token
        )
        scanner.scan(submissions)
    print(json.dumps(reporter.finish()))

    driver.quit()


if __name__ == "__main__":
    main()
